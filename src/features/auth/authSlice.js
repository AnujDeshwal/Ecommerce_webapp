import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import createUser, { signOut } from './authApi';
import { checkUser } from './authApi';
import { updateUser } from '../user/userApi';
const initialState = {
  loggedInUser:null,
  status: 'idle',
  error:null
};

export const createUserAsync = createAsyncThunk(
  'user/createUser',
  async (userData) => {
    const response = await createUser(userData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const checkUserAsync = createAsyncThunk(
  'user/checkUser',
  async (logInInfo,{rejectWithValue}) => {
    try{const response = await checkUser(logInInfo);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
    }catch(error){
      // here catch will only be executed if some above api call will be rejected so it will be rejected with the value which will come in the error section then by sending it to the predefined function rejectWithValue basically you are sending it to action.payload of extraReducers builder ke rejected waale case mai  then in that section you can easily send it to the state.error which is defined by use in the initialState 
      console.log(error)
      // dont forget to use return 
       return  rejectWithValue(error);
    }
  }
);
export const signOutAsync = createAsyncThunk(
  'user/signout',
  async (userid) => {
    const response = await signOut(userid);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const authSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = action.payload;
      })
      .addCase(checkUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(checkUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = action.payload;
      })
      .addCase(checkUserAsync.rejected, (state , action) => {
        state.status = 'idle';
        state.error = action.payload;
      })
      .addCase(signOutAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(signOutAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // now loggedInUser ka data bhi update ho jayega api mai update toh kar hi diya vahi se toh action.payload mai data aaya hai 
        state.loggedInUser=null;
      })
  },
});


export const authReducer =  authSlice.reducer;
