import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import fetchAllProducts, { fetchAllProductsByFilter } from './productListApi';
import { useSelector } from 'react-redux';
const initialState = {
  products: [],
  status: 'idle',
};
// you should know that createAsyncThunk is generally used to call a api and usse jo bhi data aa raha hai that would be stored in the state of store by createAsyncThunk easily because it provides some action pending ,fulfilled in the extraReducers 
export const fetchAllProductsAsync = createAsyncThunk(
  'product/fetchAllProducts',
  async () => {
    const response = await fetchAllProducts();
    // go to productListApi to understand  what is response.data 
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchAllProductsByFilterAsync = createAsyncThunk(
  'product/fetchAllProductsByFilter',
  // we are sending filter and sort inside the object because it is boundation in the redux 
  async (filter ,sort) => {
    const response = await fetchAllProductsByFilter(filter ,sort);
    // go to productListApi to understand  what is response.data 
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const productSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // here state means initialState has a field products so it would get data we fetched from the data because while calling api from the thunk which is just a middleware (actioncreator) support pending,fulfilled actions and with the help of that we define reducers corresponding to them now which was done manually by use like making a array of products and then usoing map to show them in the card now we are using it with the redux state and putting that api data in the redux state now with the redux we can access data from states any where , remmember this action.payload is which get returned by the fetchAllProductsAsync 
        state.products = action.payload;
      });
      builder
      .addCase(fetchAllProductsByFilterAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsByFilterAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload;
      });
  },
});


export const ProductReducer = productSlice.reducer;
// here you will learn very important thing that is when you are using 

export const selectAllProducts = (state) => state.product.products;
console.log(selectAllProducts)