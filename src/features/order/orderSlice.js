import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import createOrder, { fetchAllOrders, updateOrder } from './orderApi';

const initialState = {
 orders:[],
  status: 'idle',
  // sirf current order ka track rakhenge so that current order placed hua so that iss 
  currentOrder:null,
  totalOrders:0
};

export const createOrderAsync = createAsyncThunk(
  'order/createOrder',
  async (order) => {
    const response = await createOrder(order);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const updateOrderAsync = createAsyncThunk(
  'order/updateOrder',
  async (order) => {
    const response = await updateOrder(order);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchAllOrdersAsync = createAsyncThunk(
  'order/fetchAllOrders',
  async ({sort , pagination}) => {
    // yaha par async mai aa ek hi data structure sakta hai toh object mai daal diye unhe then neeche toh ye function hai khud se banaya hua kitne bhi arguement daal do 
    const response = await fetchAllOrders(sort,pagination);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);




export const createOrderSlice = createSlice({
  name: 'order',
  initialState,
  reducers: {
    resetOrder:(state)=>{
      state.currentOrder=null;
     },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createOrderAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createOrderAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.orders.push( action.payload);
        // here by this below line you can tell that order has placed successfully and you can show the order success page current order se uski id lene ke liye order number then show karenge  
        state.currentOrder = action.payload;
      })
      .addCase(fetchAllOrdersAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.orders =  action.payload.orders;
        state.totalOrders = action.payload.totalOrders;
      })
      .addCase(updateOrderAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateOrderAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.orders.findIndex(order=>order.id===action.payload.id);
        // here i will get the index of that order which is to be updated 
        state.orders[index] = action.payload;
      })
  },
});



export const {resetOrder} = createOrderSlice.actions;
export const orderReducer = createOrderSlice.reducer;
// pata hoga saare actions se sirf resetOrder vaala hi nikaal rahe hai and reducer ka action nikal rahe hai naam same hona chahiye 